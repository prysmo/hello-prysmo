stages:
  - test
  - check
  - publish

# Cache previous version os modules to speed up dependencies.
cache:
  paths:
    - node_modules/

# Lint js files.
lint-js:
 image: node
 stage: test
 tags:
   - docker
 script:
   - npm install -g eslint
   - eslint --ignore-pattern "**/*.min.js" $CI_PROJECT_DIR

# Performs unit testing.
unit-test:
  coverage: '/Statements\s*:\s*(\d+(?:\.\d+)?\%)/'
  image: node
  stage: test
  tags:
    - docker
  script:
    - npm i -g mocha
    - npm i -g nyc
    - npm i .
    - nyc --reporter=text-summary npm t

# Analyse code quality.
code_quality:
  stage: check
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

# Publish the package to npmjs.
npm-publish:
  stage: publish
  image: node
  only:
    - tags
    - web
    - /^v\d+\.\d+\.\d+$/
  script:
    - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
    - npm publish
